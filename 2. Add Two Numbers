/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode list1, ListNode list2) {
	        int upCount = 0;
	        ListNode head = null;
	        ListNode current = null;
	        int val = 0;
	        
	        while(list1 != null && list2 != null){       
	            val = list1.val + list2.val + upCount;
	            
	            list1 = list1.next;
	            list2 = list2.next;
	            upCount = 0;
	            
	            if(val >= 10){
	                val -= 10;
	                upCount = 1;
	            }
	            
	            if(head == null){
	                head = new ListNode(val);
	                current = head;
	            }
	            else {
	            	while(current.next != null) {
		            	current = current.next;
		            }
		            current.next = new ListNode(val);	
	            }
	            	            
	        }
	        
	        if(list1 != null){
	            while(list1 != null){
	                val = list1.val + upCount;
	                 
	                list1 = list1.next;
	                upCount = 0;
                    
                    if(val >= 10){
	                val -= 10;
	                upCount = 1;
	            }
	                
	                while(current.next != null) {
		            	current = current.next;
		            }
		            current.next = new ListNode(val);	
	            }
	        }
	        else if(list2 != null){
	            while(list2 != null){
	                val = list2.val + upCount;
	                
	                list2 = list2.next;
	                upCount = 0;
	                
                    if(val >= 10){
	                val -= 10;
	                upCount = 1;
	            }
                    
	                while(current.next != null) {
		            	current = current.next;
		            }
		            current.next = new ListNode(val);	
	            }
	        }
	            if(upCount != 0){
	                 while(current.next != null) {
		            	current = current.next;
		            }
		            current.next = new ListNode(upCount);	
	            }
	        
	        return head;
	    }
}
